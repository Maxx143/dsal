/* 
----------Assignment No - 6----------

Convert given binary tree into threaded binary tree. Analyze time and space complexity of the algorithm.	*/


// CORRECTED CODE
#include<iostream>
#include<stdio.h>
#include<stdlib.h>
using namespace std;

struct Node
{
    int key;
    Node *left, *right;
    bool isThreaded;
};

Node *createThreaded(Node *root)
{
    if (root == NULL)
        return NULL;

    Node *prev = NULL;

    // Thread the left subtree
    if (root->left != NULL)
    {
        // Recursively thread the left subtree
        prev = createThreaded(root->left);

        // Link the predecessor's right pointer to the current node
        prev->right = root;

        // Mark the predecessor's right pointer as threaded
        prev->isThreaded = true;
    }

    // If the current node's right child is NULL, return the current node
    if (root->right == NULL)
        return root;

    // If the current node has a right child, thread the right subtree
    return createThreaded(root->right);
}

Node *leftMost(Node *root)
{
    while (root != NULL && root->left != NULL)
        root = root->left;
    return root;
}

void inOrder(Node *root)
{
    if (root == NULL)
        return;

    Node *cur = leftMost(root);
    while (cur != NULL)
    {
        cout << cur->key << " ";
        if (cur->isThreaded)
            cur = cur->right;
        else
            cur = leftMost(cur->right);
    }
}

Node *newNode(int key)
{
    Node *temp = new Node;
    temp->left = temp->right = NULL;
    temp->key = key;
    temp->isThreaded = false; // Initialize isThreaded to false
    return temp;
}

int main()
{
    Node *root = newNode(30);
    root->left = newNode(10);
    root->right = newNode(50);
    root->left->right = newNode(15);
    root->right->left = newNode(40);
    root->right->right = newNode(60);
    root->right->right->left = newNode(55);
    root->right->right->right = newNode(70);
    root->right->right->left->right = newNode(57);
    createThreaded(root);
    cout << "Inorder traversal of created threaded tree is\n";
    inOrder(root);
    return 0;
}
